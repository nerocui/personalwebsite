{"version":3,"sources":["reducers/repoReducer.js","reducers/eventReducer.js","reducers/index.js","serviceWorker.js","ui/components/header.jsx","ui/components/starIcon.jsx","ui/components/forkIcon.jsx","ui/components/githubRepoCard.jsx","ui/containers/repoList.jsx","ui/containers/dashboard.jsx","action/index.js","ui/pages/homePage.jsx","index.js"],"names":["initialState","items","rootReducer","combineReducers","repoReducer","state","action","type","Object","assign","payload","eventReducer","Boolean","window","location","hostname","match","Header","props","className","map","item","title","SVG","width","height","viewBox","xmlns","this","d","fill","fillRule","React","Component","GitHubRepoCard","name","description","html_url","language","stargazers_count","forks","fork","href","target","connect","getRepos","dispatch","axios","get","then","data","catch","e","console","log","id","headerItems","HomePage","store","applyMiddleware","ReduxPromise","ReduxThunk","createStore","createStoreWithMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c0aa4279.chunk.js","sourcesContent":["\r\nconst initialState = {\r\n    items: []\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'SET_REPOS':\r\n            return Object.assign({}, state, { items: action.payload });\r\n        default:\r\n\t\t\treturn state;\r\n\t}\r\n};","\r\n\r\nconst initialState = {\r\n    items: []\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'SET_EVENTS':\r\n            return Object.assign({}, state, { items: action.payload });\r\n        default:\r\n\t\t\treturn state;\r\n\t}\r\n};","import { combineReducers } from \"redux\";\r\nimport repoReducer from './repoReducer';\r\nimport eventReducer from './eventReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    repoReducer,\r\n    eventReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport '../styles/header.scss';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div className=\"header-container\">\r\n            <div className=\"headers\">\r\n                {\r\n                    props.items.map(item => {\r\n                        return (\r\n                            <div className=\"header-item-container\">\r\n                                {item.title}\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nexport default class SVG extends React.Component {\r\n  render() {\r\n    return <svg width=\"14\" height=\"21\" viewBox=\"0 -3 14 21\" xmlns=\"http://www.w3.org/2000/svg\" {...this.props}><title>star</title><path d=\"M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z\" fill={this.props.fill} fillRule=\"evenodd\" /></svg>;\r\n  }\r\n}","import React from \"react\";\r\nexport default class SVG extends React.Component {\r\n  render() {\r\n    return <svg width=\"14\" height=\"21\" viewBox=\"0 -3 14 21\" xmlns=\"http://www.w3.org/2000/svg\" {...this.props}><title>star</title><path d=\"M 8 1 a 1.993 1.993 0 0 0 -1 3.72 V 6 L 5 8 L 3 6 V 4.72 A 1.993 1.993 0 0 0 2 1 a 1.993 1.993 0 0 0 -1 3.72 V 6.5 l 3 3 v 1.78 A 1.993 1.993 0 0 0 5 15 a 1.993 1.993 0 0 0 1 -3.72 V 9.5 l 3 -3 V 4.72 A 1.993 1.993 0 0 0 8 1 Z M 2 4.2 C 1.34 4.2 0.8 3.65 0.8 3 c 0 -0.65 0.55 -1.2 1.2 -1.2 c 0.65 0 1.2 0.55 1.2 1.2 c 0 0.65 -0.55 1.2 -1.2 1.2 Z m 3 10 c -0.66 0 -1.2 -0.55 -1.2 -1.2 c 0 -0.65 0.55 -1.2 1.2 -1.2 c 0.65 0 1.2 0.55 1.2 1.2 c 0 0.65 -0.55 1.2 -1.2 1.2 Z m 3 -10 c -0.66 0 -1.2 -0.55 -1.2 -1.2 c 0 -0.65 0.55 -1.2 1.2 -1.2 c 0.65 0 1.2 0.55 1.2 1.2 c 0 0.65 -0.55 1.2 -1.2 1.2 Z\" fill={this.props.fill} fillRule=\"evenodd\" /></svg>;\r\n  }\r\n}","import React from 'react';\r\nimport '../styles/repoCard.scss';\r\nimport StarIcon from './starIcon';\r\nimport ForkIcon from './forkIcon';\r\n\r\nconst GitHubRepoCard = ({name, description, html_url, language, stargazers_count, forks, fork }) => {\r\n    return (\r\n        <div className=\"github-repo-card\">\r\n            <div>\r\n                <h3>\r\n                    <a href={html_url}>{name}{fork ? \"(forked)\" : \"\"}</a>\r\n                </h3>\r\n                <p>{description ? description : 'No description provided'}</p>\r\n            </div>\r\n            <div>\r\n                <div className=\"properties\">\r\n                    <div>\r\n                        <div className=\"counts\">\r\n                            <a className=\"count\" href={html_url} target=\"_blank\">\r\n                                <div className=\"property\">\r\n                                    <StarIcon fill=\"white\" className=\"property-item\"/>\r\n                                    <p className=\"property-item\">{stargazers_count}</p>\r\n                                </div>\r\n                            </a>\r\n                            <a className=\"count\" href={html_url} target=\"_blank\">\r\n                                <div className=\"property\">\r\n                                    <ForkIcon fill=\"white\" className=\"property-item\"/>\r\n                                    <p className=\"property-item\">{forks}</p>\r\n                                </div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    {language ? <p className=\"language\">{language}</p> : ''}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GitHubRepoCard;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport GitHubRepoCard from '../components/githubRepoCard';\r\nimport '../styles/repoList.scss';\r\n\r\nconst RepoList = ({ items }) => {\r\n    return (\r\n        <div className=\"repo-list\">\r\n            {\r\n                items.map(item => <GitHubRepoCard {...item}/>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        items: state.repoReducer.items,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(RepoList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getRepos } from '../../action';\r\nimport RepoList from './repoList';\r\nimport '../styles/dashboard.scss';\r\n\r\nconst Dashboard = ({ getRepos }) => {\r\n    getRepos();\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <div className=\"container\">\r\n                <section id=\"repo-section\">\r\n                    <div className=\"title-container\">\r\n                        <h2>GitHub Repository</h2>\r\n                    </div>\r\n                    <div className=\"repo-list-container\">\r\n                        <div className=\"repo-list-window\">\r\n                            <RepoList />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(null, { getRepos })(Dashboard);\r\n","import axios from 'axios';\r\n\r\nconst githubUserRepoApi = 'https://api.github.com/users/nerocui/repos?page=1&per_page=100';\r\nconst githubUserEventsApi = 'https://api.github.com/users/nerocui/events';\r\n\r\nfunction dispatchRepos(repos) {\r\n    return {\r\n        payload: repos,\r\n        type: 'SET_REPOS',\r\n    };\r\n}\r\n\r\n\r\nfunction dispatchEvents(events) {\r\n    return {\r\n        payload: events,\r\n        type: 'SET_EVENTS',\r\n    };\r\n}\r\n\r\nexport function getRepos() {\r\n    return dispatch => {\r\n        axios.get(githubUserRepoApi)\r\n            .then(({data}) => dispatch(dispatchRepos(data)))\r\n            .catch(e => console.log('Failed to get repos.', e))\r\n    };\r\n}\r\n\r\nexport function getEvents() {\r\n    return dispatch => {\r\n        axios.get(githubUserEventsApi)\r\n            .then(({data}) => dispatch(dispatchEvents(data)))\r\n            .catch(e => console.log('Failed to get events.', e))\r\n    };\r\n}\r\n","import React from 'react';\r\nimport Header from '../components/header';\r\nimport Dashboard from '../containers/dashboard';\r\n\r\nconst headerItems = [\r\n    {\r\n        title: 'Blog',\r\n    },\r\n    {\r\n        title: 'Projects',\r\n    },\r\n    {\r\n        title: 'About',\r\n    }\r\n];\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"page-container\">\r\n            <Header items={headerItems}/>\r\n            <Dashboard />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { applyMiddleware, createStore } from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport ReduxThunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport HomePage from './ui/pages/homePage';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise, ReduxThunk)(createStore);\nconst store = createStoreWithMiddleware(rootReducer,{});\n\nReactDOM.render(\n  <Provider store={store}>\n    <HomePage />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}